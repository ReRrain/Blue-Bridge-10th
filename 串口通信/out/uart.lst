C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN ..\out\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\uart.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\out\uart.lst) OBJECT
                    -(..\out\uart.obj)

line level    source

   1          #include "config.h"
   2          #include <string.h>
   3          #include <stdio.h>
   4          
   5          bit flagTxd = 0;
   6          
   7          bit flagRxdFrame = 0;
   8          u8 cntRxd = 0;
   9          u8 bufRxd[100];
  10          
  11          extern void UartAction();//注意这个需要在main.c中书写！
  12          
  13          /*长整型转化为字符串*/
  14          u8 LongToStr(long dat, u8* str)
  15          {
  16   1          char i = 0;
  17   1          u8 len = 0;
  18   1          u8 buf[11];     // // 长整数最大值4294967295，转ASCII码后占用10+1=11字节(加'\0'字符)
  19   1      
  20   1          if(dat < 0)
  21   1          {
  22   2              dat = -dat;
  23   2              *str++ = '-';
  24   2              len++;
  25   2          }
  26   1          do{
  27   2              buf[i++] = dat%10 + '0';
  28   2              dat /= 10;
  29   2          }while(dat > 0);
  30   1          len += i;
  31   1          while(i-- > 0)
  32   1          {
  33   2              *str++ = buf[i]; // 上面已经进行+0x30的处理，故此处不再处理
  34   2          }
  35   1          *str = '\0';
  36   1          return len;
  37   1      }
  38          
  39          /*字符串转化为长整型*/
  40          u32 StrToLong(char* str)
  41          {
  42   1          u32 result = 0;
  43   1          u32 fact = 1;
  44   1          u8 len = strlen(str); // 不包括字符'\0'
  45   1          u8 i;
  46   1      
  47   1          for(i=len-1; i>=0; i--)
  48   1          {
  49   2              result += ((str[i] - '0') * fact);
  50   2              fact *= 10;
  51   2          }
  52   1          return result;
  53   1      }
  54          
C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 2   

  55          /*串口初始化*/
  56          void InitUart(u8 sta)
  57          {
  58   1              if(sta == 0) // 波特率：9600 /11.0592MHZ
  59   1              {
  60   2                      PCON &= 0x7F;       //波特率不倍速
  61   2                      SCON = 0x50;        //8位数据,可变波特率
  62   2                      AUXR &= 0xBF;       //定时器1时钟为Fosc/12,即12T
  63   2                      AUXR &= 0xFE;       //串口1选择定时器1为波特率发生器
  64   2                      TMOD &= 0x0F;       //清除定时器1模式位
  65   2                      TMOD |= 0x20;       //设定定时器1为8位自动重装方式
  66   2                      TL1 = 0xFD;         //设定定时初值
  67   2                      TH1 = 0xFD;         //设定定时器重装值
  68   2                      ET1 = 0;            //禁止定时器1中断
  69   2                      TR1 = 1;            //启动定时器1
  70   2                      
  71   2              }
  72   1              else if(sta == 1)// 波特率：9600 /22.1184MHZ
  73   1              {         
  74   2                      AUXR = 0x00;            // 定时器1作为波特率发生器       
  75   2                      SCON = 0x50;    
  76   2                      TMOD |= 0x20;           // 0010 0000 定时器1工作于方式2（8位自动重装方式）
  77   2                      TH1  = 0xFA;    
  78   2                      TL1  = 0xFA;
  79   2                      TR1  = 1;
  80   2                             
  81   2              }
  82   1              else if(sta == 2)// 波特率：115200 /11.0592MHZ
  83   1              {
  84   2                      PCON &= 0x7F;           //波特率不倍速
  85   2                      SCON = 0x50;            //8位数据,可变波特率
  86   2                      AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
  87   2                      AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  88   2                      TMOD &= 0x0F;           //清除定时器1模式位
  89   2                      TMOD |= 0x20;           //设定定时器1为8位自动重装方式
  90   2                      TL1 = 0xFD;                     //设定定时初值
  91   2                      TH1 = 0xFD;                     //设定定时器重装值
  92   2                      ET1 = 0;                        //禁止定时器1中断
  93   2                      TR1 = 1;                        //启动定时器1
  94   2              }
  95   1              
  96   1              ES = 1;
  97   1      }
  98          
  99          /*发送单字节*/
 100          void UartSendByte(u8 dat)
 101          {
 102   1          flagTxd = 0;
 103   1          SBUF = dat;
 104   1          while(!flagTxd);
 105   1      }
 106          
 107          /*发送回车换行*/
 108          void UartSendEnter()
 109          {
 110   1          UartSendByte(0x0D);
 111   1          UartSendByte(0x0A);
 112   1      }
 113          
 114          /*发送字符串，如果结尾有\n，则后面自动加入回车换行*/
 115          void UartSendStr(char *str)
 116          {
C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 3   

 117   1          u16 i;
 118   1          u16 len = strlen(str); 
 119   1      
 120   1          for(i=0; i<len-1; i++) // 最后一个字符单独处理，实现加入回车换行
 121   1          {
 122   2              UartSendByte(str[i]);
 123   2          }
 124   1      
 125   1          if(str[i] == '\n')
 126   1          {
 127   2              UartSendEnter();
 128   2          }
 129   1          else
 130   1          {
 131   2              UartSendByte(str[i]);
 132   2          }
 133   1      }
 134          
 135          void UartSendFloat(float dat, u8* str)
 136          {
 137   1              sprintf(str, "%.2f", dat);
 138   1              
 139   1              UartSendStr(str);
 140   1      }
 141          
 142          /*发送数值，实则转化为字符串发送，结尾自动加入回车换行*/
 143          void UartSendNum(u32 dat, u8 sta)
 144          {
 145   1          u8 buf[11];
 146   1      
 147   1          LongToStr(dat, buf);
 148   1          UartSendStr(buf);
 149   1              if(sta)
 150   1              {
 151   2                      UartSendEnter();
 152   2              }
 153   1      }
 154          
 155          /*发送字符串+数值*/
 156          void UartSendStrNum(char* buf, u32 dat, u8 sta)
 157          {
 158   1          UartSendStr(buf);
 159   1          UartSendNum(dat, sta);
 160   1      }
 161          
 162          /*十进制转十六进制*/
 163          void HexToASCII(u16 hex, char* str)
 164          {
 165   1          u8 temp = 0;
 166   1      
 167   1          temp = ((hex & 0xF000) >> 12);
 168   1          str[0] = (temp >= 10) ? (temp-10+'A') : (temp+'0');
 169   1          
 170   1          temp = ((hex & 0x0F00) >> 8);
 171   1          str[1] = (temp >= 10) ? (temp-10+'A') : (temp+'0');
 172   1                                                       
 173   1          temp = ((hex & 0x00F0) >> 4);                 
 174   1          str[2] = (temp >= 10) ? (temp-10+'A') : (temp+'0');
 175   1                                                       
 176   1          temp = ((hex & 0x000F) >> 0);                 
 177   1          str[3] = (temp >= 10) ? (temp-10+'A') : (temp+'0');
 178   1      
C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 4   

 179   1          str[4] = '\0';
 180   1      }
 181          
 182          /*发送十六进制字符*/
 183          void UartSendHex(u16 hex)
 184          {
 185   1          u8 temp[11];
 186   1      
 187   1          HexToASCII(hex, temp);
 188   1          UartSendStr(temp);
 189   1          UartSendEnter();
 190   1      }
 191          
 192          /*发送二进制字符*/
 193          void UartSendBinary(u8 dat)
 194          {
 195   1          u8 i;
 196   1          u8 temp[17];
 197   1      
 198   1          for(i=0; i<8; i++)
 199   1          {
 200   2              temp[i] = ((dat<<i) & 0x80) ? '1':'0';
 201   2          }
 202   1          temp[i] = '\0';
 203   1      
 204   1          for(i=0; i<strlen(temp); i++)
 205   1          {
 206   2              UartSendByte(temp[i]);
 207   2              UartSendByte(' ');
 208   2          }
 209   1          UartSendEnter();
 210   1      }
 211          
 212          /*串口数据读取函数，len为指定的数据长度，返回为实际的数据长度*/
 213          u8 UartRead(u8* buf, u8 len)
 214          {
 215   1              u8 i;
 216   1              
 217   1              if(len > cntRxd)
 218   1              {
 219   2                      len = cntRxd;
 220   2              }
 221   1              for(i=0; i<len; i++)
 222   1              {
 223   2                      *buf++ = bufRxd[i];
 224   2              }
 225   1              *buf = '\0';
 226   1              cntRxd = 0;
 227   1              
 228   1              return len;
 229   1      }
 230          
 231          /*串口发送数据函数，len为指定的长度，较UartSendStr可以指定发送字符串长度*/
 232          void UartWrite(u8* buf, u8 len)
 233          {
 234   1              while(len--)
 235   1              {
 236   2                      UartSendByte(*buf++);
 237   2              }
 238   1      }
 239          
 240          /*串口接收监控, ms-为定时间隔*/
C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 5   

 241          void UartMonitor(u8 ms)
 242          {
 243   1              static u8 cntbkp = 0;
 244   1              static u8 idletmr = 0;
 245   1              
 246   1              if(cntRxd > 0)
 247   1              {
 248   2                      if(cntbkp != cntRxd)
 249   2                      {
 250   3                              cntbkp = cntRxd;
 251   3                              idletmr = 0;
 252   3                      }
 253   2                      else
 254   2                      {
 255   3                              if(idletmr < 30)
 256   3                              {
 257   4                                      idletmr += ms;
 258   4                                      if(idletmr >= 30)
 259   4                                      {
 260   5                                              flagRxdFrame = 1;
 261   5                                      }
 262   4                              }
 263   3                      }
 264   2              }
 265   1              else
 266   1              {
 267   2                      cntbkp = 0;
 268   2              }
 269   1      }
 270          
 271          /*串口驱动函数，在主函数中调用*/
 272          void UartDriver()
 273          {
 274   1              if(flagRxdFrame)
 275   1              {
 276   2                      flagRxdFrame = 0;
 277   2                      UartAction();
 278   2              }
 279   1      }
 280          
 281          /*串口中断*/
 282          void UartInterrupt() interrupt 4
 283          {
 284   1              if(RI)
 285   1              {
 286   2                      RI = 0;
 287   2                      if(cntRxd < sizeof(bufRxd))
 288   2                      {
 289   3                              bufRxd[cntRxd++] = SBUF;
 290   3                      }
 291   2              }
 292   1              
 293   1              if(TI)
 294   1              {
 295   2                      TI = 0;
 296   2                      flagTxd = 1;
 297   2              }
 298   1      
 299   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.52.0.0   UART                                                              02/21/2019 18:05:16 PAGE 6   

   CODE SIZE        =   1316    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =    103      99
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
