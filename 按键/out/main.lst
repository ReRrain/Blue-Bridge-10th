C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\out\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\main.c BROWSE DEBUG OBJECTEXTEND PRINT(..\out\main.lst) OBJECT(..\ou
                    -t\main.obj)

line level    source

   1          ///*¶ÀÁ¢°´¼ü*/
   2          //#include<stc15.h>
   3          
   4          //typedef unsigned char u8;
   5          //typedef unsigned int u16;
   6          //typedef unsigned long u32;
   7          
   8          //u8 LedChar[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xC6,0xA1,0x86,0x8E};
   9          //u8 LedBuff[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
  10          //u8 Keysta[] = {1,1,1,1};//±£´æµ±Ç°Öµ
  11          //u8 KeycodeMap[] = {'1','2','3','4'};//³äµ±Ë÷Òý×Ö·û
  12          
  13          //u8 T0RH;
  14          //u8 T0RL;
  15          
  16          //sbit key_in_1 = P3^3;
  17          //sbit key_in_2 = P3^2;
  18          //sbit key_in_3 = P3^1;
  19          //sbit key_in_4 = P3^0;
  20          
  21          //void CloseOther();
  22          //void LedScan();
  23          //void ShowNumber(u32 dat);
  24          //void ConfigTimer0(u16 ms);
  25          //void KeyScan();//°´¼üÉ¨Ãè£¬ÔÚÖÐ¶Ïº¯ÊýÄÚ²¿Ö´ÐÐ£¬ÀûÓÃ¶¨Ê±Æ÷ÖÐ¶ÏÏû¶¶
  26          //void KeyDriver();//ÅÐ¶Ï°´¼üÊÇ·ñ°´ÏÂ£¬Èç¹û°´ÏÂÔòÏÔÊ¾ÊýÖµ
  27          //void KeyAction(u8 keycode);//ÅÐ¶ÏÊÇÄÄ¸ö°´¼ü°´ÏÂ£¬¶ÔÓ¦°´¼üÔÚÊýÂë¹ÜÉÏÏÔÊ¾ÊýÖµ
  28          
  29          //void main()
  30          //{
  31          //      CloseOther();
  32          //      EA = 1;
  33          //      ConfigTimer0(2);
  34          //      ShowNumber(0);
  35          //      
  36          //      while(1)
  37          //      {
  38          //              KeyDriver();
  39          //      }
  40          //}
  41          
  42          //void CloseOther()
  43          //{
  44          //      P2 = (P2 & 0x1F) | 0x80;
  45          //      P0 = 0xFF;
  46          //      P2 &= 0x1F;
  47          //      
  48          //      P2 = (P2 & 0x1F) | 0xA0;
  49          //      P0 = 0xAF;
  50          //      P2 &= 0x1F;
  51          //}
  52          
  53          //void KeyAction(u8 keycode)//ÅÐ¶ÏÊÇÄÄ¸ö°´¼ü°´ÏÂ£¬¶ÔÓ¦°´¼üÔÚÊýÂë¹ÜÉÏÏÔÊ¾ÊýÖµ
  54          //{
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 2   

  55          //      static u8 cnt = 0;//ÐèÒªÊµÏÖÔÚÉÏÒ»´ÎµÄ»ù´¡ÉÏ¼Ó·¨£¬ËùÒÔ¶¨Òå³Éstatic£¡£¡£¡£¡£¡£¡£¡£¡
  56          //      if(keycode == '1')
  57          //      {
  58          //              cnt += 1;
  59          //              ShowNumber(cnt);
  60          //      }
  61          //      if(keycode == '2')
  62          //      {
  63          //              cnt += 2;
  64          //              ShowNumber(cnt);
  65          //      }
  66          //      if(keycode == '3')
  67          //      {
  68          //              cnt += 3;
  69          //              ShowNumber(cnt);
  70          //      }
  71          //      if(keycode == '4')
  72          //      {
  73          //              cnt += 4;
  74          //              ShowNumber(cnt);
  75          //      }
  76          //}
  77          
  78          //void KeyDriver()
  79          //{
  80          //      u8 i;
  81          //      static u8 backup[4] = {1,1,1,1};//×¢ÒâÕâÀïÒªÓÃ¾²Ì¬±äÁ¿£¬Êý×éÓÃÀ´´æ·ÅÇ°´ÎÖµ£¬Ã¿½øÈëÒ»´ÎÑ­»·ÐèÒª¸ü¸ÄÒ»´ÎÊ
             -ýÖµ
  82          //      
  83          //      for(i = 0;i<4;i++)
  84          //      {
  85          //              if(Keysta[i] != backup[i])//µ±Ç°ÖµÓëÇ°´ÎÖµ²»ÏàµÈ£¬ËµÃ÷´ËÊ±°´¼ü×´Ì¬·¢Éú±ä»¯
  86          //              {
  87          //                      if(backup[i] == 1)//ËµÃ÷´ËÊ±°´¼ü°´ÏÂ
  88          //                      {
  89          //                              KeyAction(KeycodeMap[i]);
  90          //                      }
  91          //                      backup[i] = Keysta[i];//ÓÃµ±Ç°Öµ¸üÐÂÇ°´ÎÖµ
  92          //              }
  93          //      }
  94          //}
  95          
  96          //void KeyScan()                              
  97          //{
  98          //      u8 i;
  99          //      static u8 keybuff[4] = {0xFF,0xFF,0xFF,0xFF};
 100          //      keybuff[0] = (keybuff[0] << 1) | key_in_1;
 101          //      keybuff[1] = (keybuff[1] << 1) | key_in_2;
 102          //      keybuff[2] = (keybuff[2] << 1) | key_in_3;
 103          //      keybuff[3] = (keybuff[3] << 1) | key_in_4;
 104          //      
 105          //      for(i = 0;i<4;i++)
 106          //      {
 107          //              if(keybuff[i] == 0xFF)
 108          //                      Keysta[i] = 1;
 109          //              else if(keybuff[i] == 0x00)//ÕâÀïÍü¼ÇÐ´¡¾i¡¿ÁËÀ²À²À²À²À²¡£¡£¡£¡£¡£¡£
 110          //                      Keysta[i] = 0;
 111          //              else
 112          //              {}
 113          //      }
 114          //}
 115          
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 3   

 116          //void configTimer0(u16 ms)
 117          //{
 118          //      u32 tmp;//tmpÒª¶¨ÒåÎª32Î»!!!!!!!
 119          //      tmp = 11059200 / 12;
 120          //      tmp = (tmp * ms) / 1000;
 121          //      tmp = 65536 - tmp;//ÕâÀï²»ÒªÍü¼Ç!!!!!ÓÃ65536¼õ£¡£¡£¡£¡£¡
 122          //      T0RH = (u8)(tmp>>8);//(u8)Ç¿ÖÆ×ª»»³É8Î»£¬Ö»È¡´ÓµÍÎ»ÊýÆð¹»°ËÎ»¼´Í£Ö¹£¬°ÑtmpµÄ¸ß°ËÎ»¸øT0RH£¬¹ÊÐèÒªÓÒÒÆ°ËÎ
             -»
 123          //      T0RL = (u8)tmp;
 124          //      TMOD &= 0xF0;
 125          //      TMOD |= 0x01;
 126          //      TH0 = T0RH;
 127          //      TL0 = T0RL;
 128          //      TR0 = 1;
 129          //      ET0 = 1;
 130          //}
 131          
 132          //void ShowNumber(u32 dat)
 133          //{
 134          //      char i;//!!!!!!!!!!!!
 135          //      u8 buff[8];
 136          //      
 137          //      for(i = 0;i<8;i++)
 138          //      {
 139          //              buff[i] = dat % 10;
 140          //              dat = dat / 10;
 141          //      }
 142          //      for(i = 7;i>0;i--)
 143          //      {
 144          //              if(buff[i] == 0)
 145          //                      LedBuff[i] = 0xFF;
 146          //              else
 147          //                      break;
 148          //      }
 149          //      for(;i>=0;i--)//ÕâÀï»á³öÏÖiÊÇ¸ºÊýµÄÇé¿ö£¬¹Êi±ØÐë¶¨ÒåÎªcharÀàÐÍ!!!!!!!!!1
 150          //      {
 151          //              LedBuff[i] = LedChar[buff[i]];
 152          //      }
 153          //}
 154          
 155          //void LedScan()
 156          //{
 157          //      static u8 index = 0;
 158          //      
 159          //      P2 = (P2 & 0x1F) | 0xE0;
 160          //      P0  = 0xFF;//¹²ÑôÊýÂë¹Ü£¬µÍµçÆ½ÊýÂë¹ÜµãÁÁ
 161          //      P2 &= 0x1F;
 162          //      
 163          //      P2 = (P2 & 0x1F) | 0xC0;
 164          //      P0 = 0x80>>index;
 165          //      P2 &= 0x1F;
 166          //      
 167          //      P2 = (P2 & 0x1F) | 0xE0;
 168          //      P0 = LedBuff[index];
 169          //      P2 &= 0x1F;
 170          //      
 171          //      index++;
 172          //      if(index >= 8)
 173          //              index = 0;
 174          //}
 175          
 176          //void InterruptTimer0() interrupt 1
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 4   

 177          //{
 178          //      TH0 = T0RH;
 179          //      TL0 = T0RL;
 180          //      
 181          //      LedScan();
 182          //      KeyScan();
 183          //}
 184          //¾ØÕó°´¼ü
 185          //#include<stc15.h>
 186          
 187          //typedef unsigned char u8;
 188          //typedef unsigned int u16;
 189          //typedef unsigned long u32;
 190          
 191          //u8 LedChar[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xC6,0xA1,0x86,0x8E};
 192          //u8 LedBuff[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 193          //u8 Keysta[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
 194          //u8 KeyCodeMap[4][4]= {{'7','8','9','F'},{'4','5','6','F'},{'1','2','3','F'},{'0','F','F','F'}};
 195          
 196          //u8 T0RH;
 197          //u8 T0RL;
 198          
 199          //sbit key_out_1 = P3^0;
 200          //sbit key_out_2 = P3^1;
 201          //sbit key_out_3 = P3^2;
 202          //sbit key_out_4 = P3^3;
 203          //sbit key_in_1 = P4^4;
 204          //sbit key_in_2 = P4^2;
 205          //sbit key_in_3 = P3^5;
 206          //sbit key_in_4 = P3^4;
 207          
 208          //void CloseOther();
 209          //void ConfigTimer0(u16 ms);
 210          //void KeyDriver();
 211          //void ShowNumber(u32 dat);
 212          
 213          //void main()
 214          //{
 215          //      CloseOther();
 216          //      EA = 1;
 217          //      ConfigTimer0(1);
 218          //      ShowNumber(0);
 219          //      
 220          //      while(1)
 221          //      {
 222          //              KeyDriver();
 223          //      }
 224          //}
 225          
 226          //void CloseOther()
 227          //{
 228          //      P2 = (P2 & 0x1F) | 0x80;
 229          //      P0 = 0xFF;
 230          //      P2 = P2 & 0x1F;
 231          //      
 232          //      P2 = (P2 & 0x1F) | 0xA0;
 233          //      P0 = 0xAF;
 234          //      P2 &= 0x1F;
 235          //}
 236          
 237          //void KeyAction(u8 keycode)
 238          //{
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 5   

 239          //      if(keycode >= '0' && keycode <= '9')
 240          //              ShowNumber(keycode-'0');
 241          //      else
 242          //              LedBuff[0] = LedChar[15];
 243          //}
 244          
 245          //void KeyScan()
 246          //{
 247          //      u8 i;
 248          //      static u8 keyout = 0;
 249          //      static u8 keybuff[4][4] = {
 250          //      {0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFf,0xFF},{0xFF,0xFF,0xFF,0xFF}
 251          //      };
 252          
 253          //      keybuff[keyout][0] = (keybuff[keyout][0] << 1) | key_in_1;
 254          //      keybuff[keyout][1] = (keybuff[keyout][1] << 1) | key_in_2;
 255          //      keybuff[keyout][2] = (keybuff[keyout][2] << 1) | key_in_3;
 256          //      keybuff[keyout][3] = (keybuff[keyout][3] << 1) | key_in_4;
 257          //      
 258          //      for(i = 0;i<4;i++)
 259          //      {
 260          //              if((keybuff[keyout][i] & 0x0F) == 0x0F)
 261          //                      Keysta[keyout][i] = 1;
 262          //              else if ((keybuff[keyout][i] & 0x0F) == 0x00)
 263          //                      Keysta[keyout][i] = 0;
 264          //              else
 265          //              {}
 266          //      }
 267          //      keyout++;
 268          //      if(keyout>3)
 269          //              keyout = 0;     
 270          //      
 271          //      switch(keyout)
 272          //      {
 273          //              case 0: key_out_1 = 0;key_out_4 = 1;break;
 274          //              case 1: key_out_2 = 0;key_out_1 = 1;break;
 275          //              case 2: key_out_3 = 0;key_out_2 = 1;break;
 276          //              case 3: key_out_4 = 0;key_out_3 = 1;break;
 277          //              default: break;
 278          //      }       
 279          //}
 280          
 281          //void KeyDriver()
 282          //{
 283          //      u8 i,j;
 284          //      static u8 backup[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
 285          //      for(i = 0;i<4;i++)
 286          //      {
 287          //              for(j = 0;j<4;j++)
 288          //              {
 289          //                      if(Keysta[i][j] != backup[i][j])
 290          //                      {
 291          //                              if(backup[i][j] == 0)
 292          //                              {
 293          //                                      KeyAction(KeyCodeMap[i][j]);
 294          //                              }
 295          //                backup[i][j] = Keysta[i][j];
 296          //                      }
 297          //              }
 298          //      }         
 299          //}
 300          
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 6   

 301          //void ConfigTimer0(u16 ms)
 302          //{
 303          //      u32 tmp;
 304          //      tmp = 11059200 / 12;
 305          //      tmp = (tmp * ms) / 1000;
 306          //      tmp = 65536 - tmp;
 307          //      T0RH = (u8)(tmp>>8);
 308          //      T0RL = (u8)tmp;
 309          //      TMOD &= 0xF0;
 310          //      TMOD |= 0x01;
 311          //      TH0 = T0RH;
 312          //      TL0 = T0RL;
 313          //      ET0 = 1;
 314          //      TR0 = 1;
 315          //}
 316          
 317          //void LedScan()
 318          //{
 319          //      static u8 index = 0;
 320          //      
 321          //      P2 = (P2 & 0x1F) | 0xE0;
 322          //      P0 = 0xFF;
 323          //      P2 = P2 & 0x1F;
 324          //      
 325          //      P2 = (P2 & 0x1F) | 0xC0;
 326          //      P0 = 0x80 >> index;
 327          //      P2 = P2 & 0x1F;
 328          //      
 329          //      P2 = (P2 & 0x1F) | 0xE0;
 330          //      P0 = LedBuff[index];
 331          //      P2 &= 0x1F;
 332          //      
 333          //      index++;
 334          //      if(index>7)
 335          //              index = 0;
 336          //}
 337          
 338          //void ShowNumber(u32 dat)
 339          //{
 340          //      char i;
 341          //      u8 buff[8];
 342          //      
 343          //      for(i = 0;i<7;i++)
 344          //      {
 345          //              buff[i] = dat % 10;
 346          //          dat /= 10;
 347          //      }
 348          //      for(i = 7;i>0;i--)
 349          //      {
 350          //              if(buff[i] == 0)
 351          //                      LedBuff[i] = 0xFF;
 352          //              else
 353          //                      break;
 354          //      }
 355          //      for(;i>=0;i--)
 356          //      {
 357          //              LedBuff[i] = LedChar[buff[i]];
 358          //      }
 359          //}
 360          
 361          //void InterruptTimer0() interrupt 1
 362          //{
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 7   

 363          //      TH0 = T0RH;
 364          //      TL0 = T0RL;
 365          //      
 366          //      LedScan();
 367          //      KeyScan();
 368          //}
 369          //³¤°´¼ü
 370          #include<stc15.h>
 371          
 372          typedef unsigned char u8;//0-255
 373          typedef unsigned int u16;//0-65535
 374          typedef unsigned long u32;
 375          
 376          u8 LedChar[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xC6,0xA1,0x86,0x8E};//´æ´¢ÊýÂ
             -ë¹ÜÏÔÊ¾Öµ¡±0-F¡°
 377          u8 LedBuff[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};//»º³åÇø£¬´æ´¢ÊýÂë¹ÜÊµ¼ÊÏÔÊ¾µÄÊý¾Ý
 378          u8 Keysta[4] = {1,1,1,1};//´æ´¢°´¼üµ±Ç°×´Ì¬£¬£¨Èôµ±Ç°×´Ì¬ÓëÉÏÒ»´ÎµÄ×´Ì¬²»ÏàµÈ£¬ÔòËµÃ÷°´¼ü±»°´ÏÂ£©
 379          u8 KeyCodeMap[4] = {'1','2','3','4'};
 380          u16 KeyDownTime[4] = {0,0,0,0};//°´¼ü°´ÏÂµÄÊ±¼ä£¬×¢ÒâÕâÀïÒ²ÒªÓÃu16!!!!!!!!!!!!
 381          
 382          u8 T0RH;
 383          u8 T0RL;
 384          
 385          sbit key_in_1 = P3^3;
 386          sbit key_in_2 = P3^2;
 387          sbit key_in_3 = P3^1;
 388          sbit key_in_4 = P3^0;
 389          
 390          void CloseOther();
 391          void KeyDriver();
 392          void ConfigTimer0(u16 ms);
 393          void ShowNumber(u32 dat);
 394          
 395          void main()
 396          {
 397   1              CloseOther();
 398   1              EA = 1;
 399   1              ConfigTimer0(2);
 400   1              ShowNumber(0);
 401   1              
 402   1              while(1)
 403   1              {
 404   2                      KeyDriver();
 405   2              }
 406   1      }
 407          
 408          void CloseOther()//¹Ø±ÕÎÞ¹ØÍâÉè£¬£¨LED£¬·äÃùÆ÷£¬¼ÌµçÆ÷£©
 409          {
 410   1              P2 = (P2 & 0x1F) | 0x80;
 411   1              P0 = 0xFF;
 412   1              P2 &= 0x1F;
 413   1              
 414   1              P2 = (P2 & 0x1F) | 0xA0;
 415   1              P0 = 0xAF;
 416   1              P2 &= 0x1F;
 417   1      }
 418          
 419          void KeyAction(u8 keycode)
 420          {
 421   1              static cnt = 0;
 422   1              if(keycode == '1')
 423   1              {
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 8   

 424   2                      cnt += 1;
 425   2                      ShowNumber(cnt);
 426   2              }
 427   1              if(keycode == '2')
 428   1              {
 429   2                      cnt += 2;
 430   2                      ShowNumber(cnt);
 431   2              }
 432   1              if(keycode == '3')
 433   1              {
 434   2                      cnt += 3;
 435   2                      ShowNumber(cnt);
 436   2              }
 437   1              if(keycode == '4')
 438   1              {
 439   2                      cnt += 4;
 440   2                      ShowNumber(cnt);
 441   2              }
 442   1      }
 443          
 444          void KeyDriver()
 445          {
 446   1              u8 i;
 447   1              static u8 backup[4] = {1,1,1,1};//´æ´¢ÊýÂë¹ÜÉÏÒ»´ÎµÄ×´Ì¬£¬×¢ÒâÒª¶¨ÒåÎª¾²Ì¬±äÁ¿£¬ÒòÎª×´Ì¬ÖµÃ¿Ò»´Î°´¼ü°´ÏÂ¶
             -¼ÐèÒª¸üÐÂ
 448   1              static u16 TimeMax[4] = {1000,1000,1000,1000};//×¢ÒâÕâÀïÒª¶¨ÒåÎªu16£¬²»È»¾ÍÒç³öÁË!!!!!!
 449   1              for(i = 0;i<4;i++)
 450   1              {
 451   2                      if(Keysta[i] != backup[i])//±íÃ÷°´¼ü×´Ì¬·¢Éú¸Ä±ä
 452   2                      {
 453   3                              if(backup[i] == 1)//Èç¹ûÉÏÒ»´ÎµÄ×´Ì¬Îª1£¬ËµÃ÷µ±Ç°×´Ì¬Îª0£¨Îª0¾Í±íÊ¾°´¼ü±»°´ÏÂ£©
 454   3                              {
 455   4                                      KeyAction(KeyCodeMap[i]);
 456   4                              }
 457   3                              backup[i] = Keysta[i];
 458   3                      }
 459   2                      if(KeyDownTime[i]>0)
 460   2                      {
 461   3                              if(KeyDownTime[i] > TimeMax[i])
 462   3                              {
 463   4                                      KeyAction(KeyCodeMap[i]);
 464   4                                      TimeMax[i] += 200;
 465   4                              }
 466   3                      }
 467   2                      else//Òª¼ÓÔÚifÑ­»·Íâ,¿¼ÂÇµ½KeyDownTime[i]<=0£¨°´¼üÎ´°´ÏÂ£©µÄÇé¿ö
 468   2                      {
 469   3                              TimeMax[i] = 1000;
 470   3                      }
 471   2              }
 472   1      }
 473          
 474          void KeyScan()
 475          {
 476   1              u8 i;
 477   1              static u8 keybuff[4] = {0xFF,0xFF,0xFF,0xFF};
 478   1              
 479   1              keybuff[0] = (keybuff[0] << 1) | key_in_1;
 480   1              keybuff[1] = (keybuff[1] << 1) | key_in_2;
 481   1              keybuff[2] = (keybuff[2] << 1) | key_in_3;
 482   1              keybuff[3] = (keybuff[3] << 1) | key_in_4;
 483   1              
 484   1              for(i = 0;i<4;i++)
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 9   

 485   1              {
 486   2                      if(keybuff[i] == 0xFF)
 487   2                      {
 488   3                              Keysta[i] = 1;
 489   3                              KeyDownTime[i] = 0;//ÕâÀï×¢ÒâÒ²Òª¿¼ÂÇµ½£¡£¡£¡£¡£¡µ±°´¼üÃ»ÓÐ°´ÏÂÊ±£¬keydowntime[i]ÊÇÎª0µÄ
 490   3                      }
 491   2                      else if(keybuff[i] == 0x00)
 492   2                      {
 493   3                              Keysta[i] = 0;
 494   3                              KeyDownTime[i] += 4;
 495   3                      }
 496   2                      else
 497   2                      {}
 498   2              }
 499   1      }
 500          
 501          void ConfigTimer0(u16 ms)
 502          {
 503   1              u32 tmp;
 504   1              
 505   1              tmp = 11059200 / 12;
 506   1              tmp = (tmp * ms) / 1000;
 507   1              tmp = 65536 - tmp;
 508   1              T0RH = (u8)(tmp>>8);
 509   1              T0RL = (u8)tmp;
 510   1              TMOD &= 0xF0;
 511   1              TMOD |= 0x01;
 512   1              TH0 = T0RH;
 513   1              TL0 = T0RL;
 514   1              ET0 = 1;
 515   1              TR0 = 1;
 516   1      }
 517          
 518          void LedScan()
 519          {
 520   1              static u8 index = 0;
 521   1              
 522   1              P2 = (P2 & 0x1F) | 0xE0;
 523   1              P0 = 0xFF;
 524   1              P2 = P2 & 0x1F;
 525   1              
 526   1              P2 =(P2 & 0x1F) | 0xC0;
 527   1              P0 = 0x80 >> index;
 528   1              P2 = P2 & 0x1F;
 529   1              
 530   1              P2 = (P2 & 0x1F) | 0xE0;
 531   1              P0 = LedBuff[index];
 532   1              P2 = P2 & 0x1F;
 533   1              
 534   1              index++;
 535   1              if(index > 7)
 536   1                      index = 0;
 537   1      }
 538          
 539          void ShowNumber(u32 dat)
 540          {
 541   1              char i;
 542   1              u8 buff[8];
 543   1              
 544   1              for(i = 0;i<7;i++)
 545   1              {
 546   2                      buff[i] = dat % 10;
C51 COMPILER V9.52.0.0   MAIN                                                              03/06/2019 22:38:23 PAGE 10  

 547   2                      dat /= 10;
 548   2              }
 549   1              for(i = 7;i>0;i--)//
 550   1              {
 551   2                      if(buff[i] == 0)
 552   2                              LedBuff[i] = 0xFF;
 553   2                      else
 554   2                              break;
 555   2              } 
 556   1              for(;i>=0;i--)
 557   1              {
 558   2                      LedBuff[i] = LedChar[buff[i]];
 559   2              }
 560   1      }
 561          
 562          void InterruptTimer0() interrupt 1
 563          {
 564   1              TH0 = T0RH;
 565   1              TL0 = T0RL;
 566   1              
 567   1              LedScan();
 568   1              KeyScan();
 569   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    692    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     61      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
